{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ever wanted to create a Discord bot? This tutorial will show you how to create a simple discord bot in either Python, JavaScript, or Lua. Let's go! Want more specific help? Join our discord server today!","title":"Home"},{"location":"Tutorial/advanced/","text":"ENVs To use an env, you need to create a new file called \".env\". In your env file, put the following: Env TOKEN=PutTokenHere Now, make sure to change your bot code! Python import discord import os from os.path import join , dirname from dotenv import load_dotenv dotenv_path = join ( dirname ( __file__ ), '.env' ) load_dotenv ( dotenv_path ) client = discord . Client () @client . event async def on_ready (): print ( 'We have logged in as {0.user} ' . format ( client )) @client . event async def on_message ( message ): if message . content == '!ping' : await message . channel . send ( 'Pong!' ) client . run ( os . getenv ( \"TOKEN\" )) JavaScript const Discord = require ( 'discord.js' ); const client = new Discord . Client (); require ( 'dotenv' ). config () client . on ( 'ready' , () => { console . log ( `Logged in as ${ client . user . tag } !` ); }); client . on ( 'message' , msg => { if ( msg . content === '!ping' ) { msg . reply ( 'Pong!' ); } }); client . login ( process . env . TOKEN ); Lua local discordia = require ( 'discordia' ) local os = require ( 'os' ) local client = discordia . Client () client : on ( 'ready' , function () print ( 'Logged in as ' .. client . user . username ) end ) client : on ( 'messageCreate' , function ( message ) if message . content == '!ping' then message . channel : send ( 'Pong!' ) end end ) client : run ( os.getenv ( \"TOKEN\" )) And you're done! Have fun experimenting with Discord bots! Have a bot you want to others to use? Join our discord server and submit your bot in #bot-submissions .","title":"Advanced"},{"location":"Tutorial/advanced/#envs","text":"To use an env, you need to create a new file called \".env\". In your env file, put the following: Env TOKEN=PutTokenHere Now, make sure to change your bot code! Python import discord import os from os.path import join , dirname from dotenv import load_dotenv dotenv_path = join ( dirname ( __file__ ), '.env' ) load_dotenv ( dotenv_path ) client = discord . Client () @client . event async def on_ready (): print ( 'We have logged in as {0.user} ' . format ( client )) @client . event async def on_message ( message ): if message . content == '!ping' : await message . channel . send ( 'Pong!' ) client . run ( os . getenv ( \"TOKEN\" )) JavaScript const Discord = require ( 'discord.js' ); const client = new Discord . Client (); require ( 'dotenv' ). config () client . on ( 'ready' , () => { console . log ( `Logged in as ${ client . user . tag } !` ); }); client . on ( 'message' , msg => { if ( msg . content === '!ping' ) { msg . reply ( 'Pong!' ); } }); client . login ( process . env . TOKEN ); Lua local discordia = require ( 'discordia' ) local os = require ( 'os' ) local client = discordia . Client () client : on ( 'ready' , function () print ( 'Logged in as ' .. client . user . username ) end ) client : on ( 'messageCreate' , function ( message ) if message . content == '!ping' then message . channel : send ( 'Pong!' ) end end ) client : run ( os.getenv ( \"TOKEN\" )) And you're done! Have fun experimenting with Discord bots! Have a bot you want to others to use? Join our discord server and submit your bot in #bot-submissions .","title":"ENVs"},{"location":"Tutorial/events/","text":"What Are Events? Events are connections between two systems. In this case, the two systems are Discord and your bot. For example, when you start typing in a channel, Discord will notify your bot that someone is typing, and who it is. Don't understand? Join our discord server ! We'll first want to create an event listener for when your bot logs in. This can help ensure that your bot is logged on and ready to go. Python import discord client = discord . Client () @client . event async def on_ready (): print ( 'We have logged in as {0.user} ' . format ( client )) JavaScript const Discord = require ( 'discord.js' ); const client = new Discord . Client (); client . on ( 'ready' , () => { console . log ( `Logged in as ${ client . user . tag } !` ); }); Lua local discordia = require ( 'discordia' ) local client = discordia . Client () client : on ( 'ready' , function () print ( 'Logged in as ' .. client . user . username ) end ) Great! Our \"ready\" event listener is now set up. Let's move onto the fun part: listening for messages. Listening for messages isn't much different than listening for the \"ready\" event. Python import discord client = discord . Client () @client . event async def on_ready (): print ( 'We have logged in as {0.user} ' . format ( client )) @client . event async def on_message ( message ): if message . content == '!ping' : await message . channel . send ( 'Pong!' ) JavaScript const Discord = require ( 'discord.js' ); const client = new Discord . Client (); client . on ( 'ready' , () => { console . log ( `Logged in as ${ client . user . tag } !` ); }); client . on ( 'message' , msg => { if ( msg . content === '!ping' ) { msg . channel . send ( 'Pong!' ); } }); Lua local discordia = require ( 'discordia' ) local client = discordia . Client () client : on ( 'ready' , function () print ( 'Logged in as ' .. client . user . username ) end ) client : on ( 'messageCreate' , function ( message ) if message . content == '!ping' then message . channel : send ( 'Pong!' ) end end ) And with that, our bot is almost ready to run. However, there is one more crucial step to finishing a bot.","title":"Events"},{"location":"Tutorial/installation/","text":"Read Before Starting If you do not have any experience with Python, JavaScript, or Lua, it is recommended that you learn the basic foundation of one of those languages. Let's begin! First off, we need to require the module and create a bot client. This is done differently in each language, so make sure to select the correct one below. Python import discord client = discord . Client () JavaScript const Discord = require ( 'discord.js' ); const client = new Discord . Client (); Lua local discordia = require ( 'discordia' ) local client = discordia . Client () Great! We've completed the first steps toward creating our very own Discord bot. Now, let's move on to events .","title":"Installation"},{"location":"Tutorial/installation/#lets-begin","text":"First off, we need to require the module and create a bot client. This is done differently in each language, so make sure to select the correct one below. Python import discord client = discord . Client () JavaScript const Discord = require ( 'discord.js' ); const client = new Discord . Client (); Lua local discordia = require ( 'discordia' ) local client = discordia . Client () Great! We've completed the first steps toward creating our very own Discord bot. Now, let's move on to events .","title":"Let's begin!"},{"location":"Tutorial/login/","text":"We're almost done with our bot! However, we need to make the bot actually log in. How To Get Your Bot Token To make our bot log in, we need a token . To get our bot token we first need to head over to the Discord Developer page . Once we're there, we need to create a new application. Then, go to the \"Bot\" tab on the left and create a bot. Once we've created a bot, the center of the \"Bot\" page should have a \"Copy\" button. Click that, and you have your token! Once we have our token, add a \"run\" function and include the token as the parameter. Python import discord client = discord . Client () @client . event async def on_ready (): print ( 'We have logged in as {0.user} ' . format ( client )) @client . event async def on_message ( message ): if message . content == '!ping' : await message . channel . send ( 'Pong!' ) client . run ( 'INSERT_TOKEN_HERE' ) JavaScript const Discord = require ( 'discord.js' ); const client = new Discord . Client (); client . on ( 'ready' , () => { console . log ( `Logged in as ${ client . user . tag } !` ); }); client . on ( 'message' , msg => { if ( msg . content === '!ping' ) { msg . reply ( 'Pong!' ); } }); client . login ( 'INSERT_TOKEN_HERE' ); Lua local discordia = require ( 'discordia' ) local client = discordia . Client () client : on ( 'ready' , function () print ( 'Logged in as ' .. client . user . username ) end ) client : on ( 'messageCreate' , function ( message ) if message . content == '!ping' then message . channel : send ( 'Pong!' ) end end ) client : run ( 'Bot INSERT_TOKEN_HERE' ) Congrats! You've finished your first ever Discord bot! Run the program, invite the bot to your server, and you're all set! Being Secure Don't want your private bot tokens out in the public? Don't worry, since envs, or environment variables, exist for this purpose. To learn how to use an env file, check out the Advanced page.","title":"Login"}]}